AWSTemplateFormatVersion: 2010-09-09
Description: Creates an SNS topic and Lambda function to enable SecurityHub in the Security account.

Parameters:
  SecurityAccountId:
    Type: String
    Description: SecurityHub master AWS account ID.
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: >
      The Security Account ID must be a 12 character string.
    MinLength: 12
    MaxLength: 12
  OrganizationId:
    Type: String
    Description: AWS Organizations ID for the Landing Zone.
    MinLength: 12
    MaxLength: 12
    AllowedPattern: '^[o][\-][a-z0-9]{10}$'
    ConstraintDescription: >
      The Org Id must be a 12 character string starting with o- and followed by 10 lower case alphanumeric characters
  S3SourceBucket:
    Type: String
    Description: S3 bucket containing securityhub_enabler.zip file for SecurityHubEnabler lambda function
  ComplianceFrequency:
    Type: Number
    Default: "60"
    Description: Frequency (in minutes between 1 and 3600, default is 60) to check organizational compliance
    MinValue: 1
    MaxValue: 3600
    ConstraintDescription: >
      Compliance Frequency must be a number between 1 and 3600, inclusive.
  RoleToAssume:
    Type: String
    Default: 'AWSControlTowerExecution'
    Description: >
      IAM role to be assumed in child accounts to enable SecurityHub. The default is AWSControlTowerExecution for a Control Tower environment.

Resources:
  SecurityHubEnablerRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
      - PolicyName: SecurityHubEnablerPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - organizations:ListAccounts
            - organizations:DescribeAccount
            Resource: '*'
            Condition:
              StringEquals:
                "aws:PrincipalOrgId": !Ref OrganizationId
          - Effect: Allow
            Action:
            - sts:AssumeRole
            Resource: !Sub 'arn:aws:iam::*:role/${RoleToAssume}'
            Condition:
              StringEquals:
                "aws:PrincipalOrgId": !Ref OrganizationId
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref SecurityHubEnablerTopic
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 
              -  !Sub 'arn:aws:logs:ca-central-1:${AWS::AccountId}:log-group:/aws/lambda/*'
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: !Sub 'arn:aws:iam::*:role/${RoleToAssume}'
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
              - 'securityhub:AcceptInvitation'
              - 'securityhub:BatchEnableStandards'
              - 'securityhub:CreateMembers'
              - 'securityhub:DisassociateMembers'
              - 'securityhub:DeleteMembers'
              - 'securityhub:EnableSecurityHub'
              - 'securityhub:GetEnabledStandards'
              - 'securityhub:GetFindings'
              - 'securityhub:GetMasterAccount'
              - 'securityhub:InviteMembers'
              - 'securityhub:ListInvitations'
              - 'securityhub:ListMembers'
              # - lambda:AddPermission
              # - lambda:RemovePermission
              # - events:PutRule
              # - events:DeleteRule
              # - events:PutTargets
              # - events:RemoveTargets
            Resource: '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Organizations doesn't have arns, so we have to use an asterisk in the policy"

  SecurityHubEnablerLambda: 
    Type: "AWS::Lambda::Function"
    DependsOn: SecurityHubEnablerRole
    Properties: 
      Handler: "securityhub_enabler.lambda_handler"
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${SecurityHubEnablerRole}"
      Code: 
        S3Bucket: !Ref S3SourceBucket
        S3Key: securityhub_enabler.zip
      Runtime: "python3.7"
      MemorySize: 128
      Timeout: 900
      # ###################################################################
      ReservedConcurrentExecutions: 2
      # ###################################################################
      Environment:
        Variables:
            assume_role: !Sub ${RoleToAssume}
            ct_root_account: !Sub ${AWS::AccountId}
            master_account: !Sub ${SecurityAccountId}
            topic: !Ref SecurityHubEnablerTopic

  SecurityHubEnablerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SecurityHub_Enabler
      TopicName: SecurityHubEnablerTopic

  SecurityHubEnablerTopicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SecurityHubEnablerLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SecurityHubEnablerTopic

  SecurityHubEnablerSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SecurityHubEnablerLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SecurityHubEnablerTopic

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "DailyLambdaTrigger"
      ScheduleExpression: !Sub "rate(${ComplianceFrequency} minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt SecurityHubEnablerLambda.Arn
          Id: "DailyInvite"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt SecurityHubEnablerLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn
