AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template will automate the importing of aws config findings into aws security hub

Parameters:
  SecurityAccountId:
    Type: String
    Description: SecurityHub master AWS account ID.
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: >
      The Security Account ID must be a 12 character string.
    MinLength: 12
    MaxLength: 12
  OrganizationId:
    Type: String
    Description: AWS Organizations ID for the Landing Zone.
    MinLength: 12
    MaxLength: 12
    AllowedPattern: '^[o][\-][a-z0-9]{10}$'
    ConstraintDescription: >
      The Org Id must be a 12 character string starting with o- and followed by 10 lower case alphanumeric characters
  S3SourceBucket:
    Type: String
    Description: S3 bucket containing securityhub_enabler.zip file for SecurityHubEnabler lambda function
  ComplianceFrequency:
    Type: Number
    Default: "60"
    Description: Frequency (in minutes between 1 and 3600, default is 60) to check organizational compliance
    MinValue: 1
    MaxValue: 3600
    ConstraintDescription: >
      Compliance Frequency must be a number between 1 and 3600, inclusive.
  RoleToAssume:
    Type: String
    Default: 'AWSControlTowerExecution'
    Description: >
      IAM role to be assumed in child accounts to enable SecurityHub. The default is AWSControlTowerExecution for a Control Tower environment.

Resources:
  SecHubConfigIntRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'config-sechub-int-lambda-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SecHubConfigIntegrationpolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'securityhub:BatchImportFindings'
                  - 'organizations:ListAccounts'
                  - 'organizations:DescribeAccount'
                Resource: '*'
                Condition:
                  StringEquals: 
                    "aws:PrincipalOrgId": !Ref OrganizationId
              - Effect: Allow
                Action:
                - sts:AssumeRole
                Resource: !Sub 'arn:aws:iam::*:role/${RoleToAssume}'
                Condition:
                  StringEquals:
                    "aws:PrincipalOrgId": !Ref OrganizationId
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource: !Sub 'arn:aws:iam::*:role/${RoleToAssume}'
              - Effect: Allow
                Action: 
                  - 'config:DescribeConfigRules'
                Resource: '*'
  ConfigSecHubFunction:
    Type: AWS::Lambda::Function
    DependsOn: SecHubConfigIntRole
    Properties:
      Code:
        S3Bucket: !Ref S3SourceBucket
        S3Key: 'sechubconfig-int.zip'
      FunctionName : 'Config-SecHub-Lambda'
      Handler: 'sechubconfig-int.lambda_handler'
      Role:
        Fn::GetAtt: 
          - 'SecHubConfigIntRole' 
          - 'Arn'
      Runtime: python3.7
      Timeout: 900 
      Environment:
        Variables:
            assume_role: !Sub ${RoleToAssume}
            ct_root_account: !Sub ${AWS::AccountId}
            master_account: !Sub ${SecurityAccountId}
            
  ConfigSecHubCWRule:
    Type: AWS::Events::Rule
    Properties:
      Description: This CW rule integrates AWS Config Compliance events with AWS Lambda as a target
      Name: 'Config-Sechub-CW-Rule'
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Rules Compliance Change
        detail:
          messageType:
            - ComplianceChangeNotification
      State: 'ENABLED'
      Targets:
        - 
          Arn: 
            Fn::GetAtt:
              - 'ConfigSecHubFunction'
              - 'Arn'
          Id: 'TargetFunctionV1'      
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: 
        Fn::GetAtt:
          - 'ConfigSecHubFunction'
          - 'Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'ConfigSecHubCWRule'
          - 'Arn'